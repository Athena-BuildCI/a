name: Validate Keystore with Keytool (No Android Project)

on:
  workflow_dispatch: # 允许手动触发

jobs:
  validate-keystore-via-keytool:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Java (for keytool)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17' # keytool 通常随 JDK 一起提供

      - name: Create .jks keystore file from Secret
        id: create_jks # 给这个步骤一个 id 以便后续引用其输出
        run: |
          echo "创建 .jks 密钥库文件..."
          # 直接使用 KEYSTORE_FILENAME secret 作为文件名
          KEYSTORE_ACTUAL_FILENAME="${{ secrets.KEYSTORE_FILENAME }}"
          if [ -z "$KEYSTORE_ACTUAL_FILENAME" ]; then
            echo "错误: KEYSTORE_FILENAME secret 未设置或为空！"
            exit 1
          fi
          echo "密钥库文件名: $KEYSTORE_ACTUAL_FILENAME"

          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "错误: KEYSTORE_BASE64 secret 未设置或为空！"
            exit 1
          fi

          # 将 .jks 文件创建在当前工作目录（由 runner 提供）
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > "$KEYSTORE_ACTUAL_FILENAME"
          
          if [ -s "$KEYSTORE_ACTUAL_FILENAME" ]; then
            echo ".jks 文件已成功创建为 $KEYSTORE_ACTUAL_FILENAME"
            ls -l "$KEYSTORE_ACTUAL_FILENAME"
            # 将创建的文件的绝对路径设置为输出，以便后续步骤使用
            echo "jks_file_path=$(pwd)/$KEYSTORE_ACTUAL_FILENAME" >> $GITHUB_OUTPUT
          else
            echo "错误: .jks 文件 '$KEYSTORE_ACTUAL_FILENAME' 创建失败或为空！"
            exit 1
          fi
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_FILENAME: ${{ secrets.KEYSTORE_FILENAME }}

      - name: Extract Keystore Properties from Secret
        id: keystore_props
        run: |
          echo "解析 KEYSTORE_PROPERTIES_CONTENT..."
          PROPERTIES_CONTENT="${{ secrets.KEYSTORE_PROPERTIES_CONTENT }}"
          if [ -z "$PROPERTIES_CONTENT" ]; then
            echo "错误: KEYSTORE_PROPERTIES_CONTENT secret 未设置或为空！"
            exit 1
          fi

          # 提取 RELEASE_STORE_FILE (用于验证是否与 KEYSTORE_FILENAME 匹配)
          DECLARED_STORE_FILE=$(echo "$PROPERTIES_CONTENT" | grep '^RELEASE_STORE_FILE=' | cut -d'=' -f2- | tr -d '\r')
          if [ -z "$DECLARED_STORE_FILE" ]; then
            echo "警告: 未能从 KEYSTORE_PROPERTIES_CONTENT 中提取 RELEASE_STORE_FILE。"
          else
            echo "KEYSTORE_PROPERTIES_CONTENT 中的 RELEASE_STORE_FILE: $DECLARED_STORE_FILE"
            # 验证 KEYSTORE_PROPERTIES_CONTENT 中的 RELEASE_STORE_FILE 是否与 KEYSTORE_FILENAME 匹配
            if [ "$DECLARED_STORE_FILE" != "${{ secrets.KEYSTORE_FILENAME }}" ]; then
              echo "错误: KEYSTORE_PROPERTIES_CONTENT 中的 RELEASE_STORE_FILE ('$DECLARED_STORE_FILE') 与 KEYSTORE_FILENAME secret ('${{ secrets.KEYSTORE_FILENAME }}') 不匹配！"
              exit 1
            fi
          fi
          echo "declared_store_file=$DECLARED_STORE_FILE" >> $GITHUB_OUTPUT


          # 提取 RELEASE_STORE_PASSWORD
          STORE_PASSWORD=$(echo "$PROPERTIES_CONTENT" | grep '^RELEASE_STORE_PASSWORD=' | cut -d'=' -f2- | tr -d '\r')
          if [ -z "$STORE_PASSWORD" ]; then
            echo "警告: 未能从 KEYSTORE_PROPERTIES_CONTENT 中提取 RELEASE_STORE_PASSWORD。"
            # exit 1 # 如果这是必需的，则取消注释
          else
            echo "RELEASE_STORE_PASSWORD 已提取。"
          fi
          echo "store_password=$STORE_PASSWORD" >> $GITHUB_OUTPUT

          # 提取 RELEASE_KEY_ALIAS
          KEY_ALIAS=$(echo "$PROPERTIES_CONTENT" | grep '^RELEASE_KEY_ALIAS=' | cut -d'=' -f2- | tr -d '\r')
          if [ -z "$KEY_ALIAS" ]; then
            echo "警告: 未能从 KEYSTORE_PROPERTIES_CONTENT 中提取 RELEASE_KEY_ALIAS。"
            # exit 1 # 如果这是必需的，则取消注释
          else
            echo "RELEASE_KEY_ALIAS 已提取。"
          fi
          echo "key_alias=$KEY_ALIAS" >> $GITHUB_OUTPUT

          # 提取 RELEASE_KEY_PASSWORD
          KEY_PASSWORD=$(echo "$PROPERTIES_CONTENT" | grep '^RELEASE_KEY_PASSWORD=' | cut -d'=' -f2- | tr -d '\r')
          if [ -z "$KEY_PASSWORD" ]; then
            echo "警告: 未能从 KEYSTORE_PROPERTIES_CONTENT 中提取 RELEASE_KEY_PASSWORD。"
            # exit 1 # 如果这是必需的，则取消注释
          else
            echo "RELEASE_KEY_PASSWORD 已提取。"
          fi
          echo "key_password=$KEY_PASSWORD" >> $GITHUB_OUTPUT
        env:
          KEYSTORE_PROPERTIES_CONTENT: ${{ secrets.KEYSTORE_PROPERTIES_CONTENT }}
          # KEYSTORE_FILENAME 也传递给 env 以便在步骤内部访问，用于比较
          KEYSTORE_FILENAME: ${{ secrets.KEYSTORE_FILENAME }}


      - name: Validate Keystore with keytool -list
        run: |
          echo "尝试使用 keytool -list -v 列出密钥库内容..."
          JKS_FILE_PATH="${{ steps.create_jks.outputs.jks_file_path }}"
          STORE_PASSWORD="${{ steps.keystore_props.outputs.store_password }}"

          if [ -z "$STORE_PASSWORD" ]; then
            echo "错误: 无法获取密钥库密码 (RELEASE_STORE_PASSWORD) 用于 keytool。"
            echo "请确保 KEYSTORE_PROPERTIES_CONTENT secret 包含有效的 'RELEASE_STORE_PASSWORD=your_password' 行。"
            exit 1
          fi
          
          echo "使用密钥库文件: $JKS_FILE_PATH"
          # 使用 -storepass 直接提供密码，避免交互式提示
          # -v 提供详细输出
          if ! keytool -list -v -keystore "$JKS_FILE_PATH" -storepass "$STORE_PASSWORD"; then
            echo "keytool -list 命令执行失败。请检查上面的错误信息。"
            echo "常见的错误原因："
            echo "  - 'Keystore was tampered with, or password was incorrect': RELEASE_STORE_PASSWORD 错误或 .jks 文件损坏/不匹配。"
            echo "  - 'java.io.IOException: Invalid keystore format': .jks 文件可能不是有效的密钥库文件。"
            exit 1
          fi
          
          echo "keytool -list 执行成功。"

      - name: (Optional) Validate Specific Alias with keytool
        # 只有在 keytool -list 成功，并且我们成功提取了别名时才尝试
        if: success() && steps.keystore_props.outputs.key_alias != ''
        run: |
          echo "尝试使用 keytool 验证特定别名..."
          JKS_FILE_PATH="${{ steps.create_jks.outputs.jks_file_path }}"
          STORE_PASSWORD="${{ steps.keystore_props.outputs.store_password }}"
          KEY_ALIAS="${{ steps.keystore_props.outputs.key_alias }}"
          # KEY_PASSWORD="${{ steps.keystore_props.outputs.key_password }}" # 对于这些命令通常不需要

          echo "使用密钥库文件: $JKS_FILE_PATH, 别名: $KEY_ALIAS"
          
          # 尝试列出特定别名的详细信息
          if ! keytool -list -keystore "$JKS_FILE_PATH" -alias "$KEY_ALIAS" -storepass "$STORE_PASSWORD" -v; then
            echo "keytool -list -alias $KEY_ALIAS 命令执行失败。"
            echo "常见的错误原因："
            echo "  - 别名 '$KEY_ALIAS' (来自 RELEASE_KEY_ALIAS) 在密钥库中不存在。"
            echo "  - RELEASE_STORE_PASSWORD 错误 (尽管上一步可能已通过，但特定别名访问也可能触发)。"
            exit 1
          fi
          
          echo "keytool -list -alias $KEY_ALIAS 执行成功。"
          echo "这确认了 RELEASE_STORE_PASSWORD 正确，并且别名 '$KEY_ALIAS' (RELEASE_KEY_ALIAS) 存在于密钥库中。"
          echo "要完全验证 RELEASE_KEY_PASSWORD，通常需要进行实际的签名操作，这超出了此 keytool 验证的范围。"

    # env: # 全局 env 块在这里不是必需的，因为我们已经在每个步骤中通过 env 传递了需要的 secrets
